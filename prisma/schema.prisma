datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  vehicles  Vehicle[]
  logs      Log[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}


model Mechanic {
  id    String @id @default(cuid())
  name String
  email String? @unique
  location String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  logs      Log[]
}

model Log {
  id    String @id @default(cuid())
  title String
  body  String?
  type String // Minor, Major, Modify, Check

  cost Float?
  odometer Float?

  servicedAt DateTime @default(now())
  selfService Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tags  Tag[]

  mechanic Mechanic? @relation(fields: [mechanicId], references: [id])
  mechanicId String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  vehicle   Vehicle   @relation(fields: [vehicleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  vehicleId String
}

model Vehicle {
  id    String @id @default(cuid())
  name String?
  make  String
  model  String
  year  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  logs   Log[]
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  logs Log[]
}
